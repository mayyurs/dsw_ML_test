# -*- coding: utf-8 -*-
"""model_ann.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yJULC9_o0pso5MZQgDTQLkYxUHEMsACS

Artificial Neural Networks (ANNs) are a class of machine learning models inspired by the structure and function of biological neural networks in the human brain. ANNs consist of interconnected nodes, called neurons, organized into layers. The most common types of layers include input layers, hidden layers, and output layers.
"""

# model_ann.py
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import warnings
from sklearn.model_selection import GridSearchCV # for hyperparameter tuning
warnings.filterwarnings("ignore", category=FutureWarning)  # Suppress FutureWarning

# Object-oriented, class-based approach :
class ANNModel:
    def __init__(self):
        self.model = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=500, activation='relu', solver='adam', random_state=42)
        self.label_encoders = {}

# loading function
def load(self, data_file):
      self.data = pd.read_csv(data_file)

# pre-processing function
def preprocess(self):
        self.data.fillna(method='ffill', inplace=True)
        for col in ['category', 'main_promotion', 'color']:
            self.label_encoders[col] = LabelEncoder()
            self.data[col] = self.label_encoders[col].fit_transform(self.data[col])
        self.X = self.data.drop(columns=['item_no', 'success_indicator'])
        self.y = self.data['success_indicator']

# training function
def train(self):
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y, test_size=0.2, random_state=42)
        self.model.fit(self.X_train, self.y_train)

# testing function
def test(self):
        y_pred = self.model.predict(self.X_test)
        print("Accuracy:", accuracy_score(self.y_test, y_pred))
        print("Classification Report:")
        print(classification_report(self.y_test, y_pred))

# predicting function
def predict(self, input_data_file):
        input_data = pd.read_csv(input_data_file)
        input_data.fillna(method='ffill', inplace=True)
        for col in ['category', 'main_promotion', 'color']:
            input_data[col] = self.label_encoders[col].transform(input_data[col])
        predictions = self.model.predict(input_data.drop(columns=['item_no']))
        return predictions

"""ANNs have various hyperparameters that need to be tuned for optimal performance, including the number of hidden layers, the number of neurons in each layer, the choice of activation functions, learning rate, batch size, and regularization parameters (e.g., L1 and L2 regularization)."""

# hyperparameter tuning for ann
def hyperparameter_tuning(self):
        param_grid = {
            'hidden_layer_sizes': [(100,), (100, 50), (200, 100)],
            'activation': ['relu', 'tanh', 'logistic'],
            'learning_rate_init': [0.001, 0.01, 0.1]
        }
        grid_search = GridSearchCV(self.model, param_grid, cv=5, scoring='accuracy', n_jobs=-1)
        grid_search.fit(self.X_train, self.y_train)
        self.model = grid_search.best_estimator_

